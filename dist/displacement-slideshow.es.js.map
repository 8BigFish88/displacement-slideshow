{"version":3,"file":"displacement-slideshow.es.js","sources":["../src/displacement-slideshow.js"],"sourcesContent":["import * as THREE from 'three';\nimport TweenMax from 'gsap/TweenMax';\n\nexport default function (opts) {\n\n  var vertex = `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n\n  var fragment = `\nvarying vec2 vUv;\n\nuniform float dispFactor;\nuniform float dpr;\nuniform sampler2D disp;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform float angle1;\nuniform float angle2;\nuniform float intensity1;\nuniform float intensity2;\nuniform vec4 res;\nuniform vec2 parent;\n\nmat2 getRotM(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\nvoid main() {\n  vec4 disp = texture2D(disp, vUv);\n  vec2 dispVec = vec2(disp.r, disp.g);\n\n  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;\n  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);\n\n\n  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;\n  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\n}\n`;\n\n  // please respect authorship and do not remove\n  console.log('%c Hover effect by Robin Delaporte: https://github.com/robin-dela/hover-effect ', 'color: #bada55; font-size: 0.8rem');\n\n\n  function firstDefined() {\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== undefined) return arguments[i];\n    }\n  }\n\n  var parent = opts.parent;\n  var dispImage = opts.displacementImage;\n  var image1 = opts.image1;\n  var image2 = opts.image2;\n  var images =  firstDefined(opts.images,[opts.image1,opts.image2]);\n  var imagesRatio = firstDefined(opts.imagesRatio, 1.0);\n  var intensity1 = firstDefined(opts.intensity1, opts.intensity, 1);\n  var intensity2 = firstDefined(opts.intensity2, opts.intensity, 1);\n  var commonAngle = firstDefined(opts.angle, Math.PI / 4); // 45 degrees by default, so grayscale images work correctly\n  var angle1 = firstDefined(opts.angle1, commonAngle);\n  var angle2 = firstDefined(opts.angle2, -commonAngle * 3);\n  var speedIn = firstDefined(opts.speedIn, opts.speed, 1.6);\n  var speedOut = firstDefined(opts.speedOut, opts.speed, 1.2);\n  var easing = firstDefined(opts.easing, Expo.easeOut);\n  var transitionDelay = firstDefined(opts.transitionDelay, 3000);\n\n  var currentImage = 0;\n  var nextImage = 1;\n  var mat = undefined;\n  var object = undefined;\n  var geometry = undefined;\n  var texture1 = null;\n  var texture2 = null;\n  var disp = null;\n  var loader = null;\n  var slideshowId = null;\n\n  if (!parent) {\n    console.warn('Parent missing');\n    return;\n  }\n\n  if (!((images || (image1 && image2)) && dispImage)) {\n    console.warn('One or more images are missing');\n    return;\n  }\n\n  var scene = new THREE.Scene();\n  var camera = new THREE.OrthographicCamera(\n      parent.offsetWidth / -2,\n      parent.offsetWidth / 2,\n      parent.offsetHeight / 2,\n      parent.offsetHeight / -2,\n      1,\n      1000\n  );\n\n  var renderer = new THREE.WebGLRenderer({\n    antialias: false,\n    alpha: true\n  });\n\n  var imageAspect = imagesRatio;\n\n  var render = function () {\n    // This will be called by the TextureLoader as well as TweenMax.\n    renderer.render(scene, camera);\n  };\n\n  function setLoader() {\n    loader = new THREE.TextureLoader();\n    loader.crossOrigin = '';\n  }\n\n  function setDisplacement() {\n    disp = loader.load(dispImage, render);\n    disp.magFilter = disp.minFilter = THREE.LinearFilter;\n  }\n\n  function setMaterial() {\n    mat = new THREE.ShaderMaterial({\n      uniforms: {\n        intensity1: {\n          type: 'f',\n          value: intensity1\n        },\n        intensity2: {\n          type: 'f',\n          value: intensity2\n        },\n        dispFactor: {\n          type: 'f',\n          value: 0.0\n        },\n        angle1: {\n          type: 'f',\n          value: angle1\n        },\n        angle2: {\n          type: 'f',\n          value: angle2\n        },\n        texture1: {\n          type: 't',\n          value: texture1\n        },\n        texture2: {\n          type: 't',\n          value: texture2\n        },\n        disp: {\n          type: 't',\n          value: disp\n        },\n        res: {\n          type: 'vec4',\n          value: new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2)\n        },\n        dpr: {\n          type: 'f',\n          value: window.devicePixelRatio\n        }\n      },\n\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      opacity: 1.0,\n    });\n  }\n\n  function setMaterialForNextTransition() {\n    mat.uniforms.texture1.value = texture1;\n    mat.uniforms.texture2.value = texture2;\n    mat.uniforms.dispFactor.value = 0;\n  }\n\n  function setScene() {\n    scene = new THREE.Scene();\n    geometry = new THREE.PlaneBufferGeometry(parent.offsetWidth, parent.offsetHeight, 1);\n    object = new THREE.Mesh(geometry, mat);\n    scene.add(object);\n  }\n\n  function transitionIn() {\n    TweenMax.to(mat.uniforms.dispFactor, speedIn, {\n      value: 1,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render,\n    });\n  }\n\n  function transitionOut() {\n    TweenMax.to(mat.uniforms.dispFactor, speedOut, {\n      value: 0,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render\n    });\n  }\n\n  function playSlideshow() {\n    var index = 0\n    setImage(index)\n    slideshowId = setInterval(() => {\n      transitionIn()\n      index = nextImage\n      setImage(index)\n      loadTexturesImages()\n      setMaterialForNextTransition()\n    }, transitionDelay);\n    return slideshowId;\n  }\n\n  function stopSlideshow() {\n    slideshowId && clearInterval(slideshowId);\n  }\n\n  function setImage(index) {\n    currentImage = index\n    nextImage = (index == (images.length - 1)) ? 0 : (index + 1)\n  }\n\n  function loadTexturesImages() {\n    texture1 = texture2 || loader.load(images[currentImage], render);\n    texture2 = loader.load(images[nextImage], render);\n\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\n  }\n\n  camera.position.z = 1;\n\n  renderer.setPixelRatio(2.0);\n  renderer.setClearColor(0xffffff, 0.0);\n  renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n  parent.appendChild(renderer.domElement);\n\n  let a1, a2;\n  if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n    a1 = 1;\n    a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n  } else {\n    a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n    a2 = 1;\n  }\n\n  setLoader()\n\n  setDisplacement()\n\n  loadTexturesImages();\n\n  setMaterial();\n\n  setScene()\n\n  window.addEventListener('resize', function (e) {\n    if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n      a1 = 1;\n      a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n    } else {\n      a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n      a2 = 1;\n    }\n    object.material.uniforms.res.value = new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2);\n    renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n\n    render()\n  });\n\n  this.next = transitionIn;\n  this.playSlideshow = playSlideshow;\n  this.stopSlideshow = stopSlideshow;\n  this.previous = transitionOut;\n};\n\n"],"names":["opts","firstDefined","i","arguments","length","undefined","console","log","parent","dispImage","displacementImage","image1","image2","images","imagesRatio","intensity1","intensity","intensity2","commonAngle","angle","Math","PI","angle1","angle2","speedIn","speed","speedOut","easing","Expo","easeOut","transitionDelay","currentImage","nextImage","mat","object","geometry","texture1","texture2","disp","loader","slideshowId","a1","a2","scene","THREE","camera","offsetWidth","offsetHeight","renderer","antialias","alpha","imageAspect","render","position","z","setPixelRatio","setClearColor","setSize","appendChild","domElement","crossOrigin","load","magFilter","minFilter","loadTexturesImages","uniforms","type","value","dispFactor","res","dpr","window","devicePixelRatio","vertexShader","fragmentShader","transparent","opacity","add","addEventListener","e","material","next","transitionIn","playSlideshow","index","setImage","setInterval","stopSlideshow","clearInterval","previous","TweenMax","to","ease","onUpdate","onComplete","warn"],"mappings":"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"}