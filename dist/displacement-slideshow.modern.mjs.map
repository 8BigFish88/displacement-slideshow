{"version":3,"file":"displacement-slideshow.modern.mjs","sources":["../src/displacement-slideshow.js"],"sourcesContent":["import * as THREE from 'three';\nimport gsap from 'gsap/all';\n\nexport default function (opts) {\n\n  var vertex = `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n\n  var fragment = `\nvarying vec2 vUv;\n\nuniform float dispFactor;\nuniform float dpr;\nuniform sampler2D disp;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform float angle1;\nuniform float angle2;\nuniform float intensity1;\nuniform float intensity2;\nuniform vec4 res;\nuniform vec2 parent;\n\nmat2 getRotM(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\nvoid main() {\n  vec4 disp = texture2D(disp, vUv);\n  vec2 dispVec = vec2(disp.r, disp.g);\n\n  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;\n  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);\n\n\n  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;\n  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\n}\n`;\n\n  // please respect authorship and do not remove\n  console.log('%c Hover effect by Robin Delaporte: https://github.com/robin-dela/hover-effect ', 'color: #bada55; font-size: 0.8rem');\n\n\n  function firstDefined() {\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== undefined) return arguments[i];\n    }\n  }\n\n  var parent = opts.parent;\n  var dispImage = opts.displacementImage;\n  var image1 = opts.image1;\n  var image2 = opts.image2;\n  var images =  firstDefined(opts.images,[opts.image1,opts.image2]);\n  var imagesRatio = firstDefined(opts.imagesRatio, 1.0);\n  var intensity1 = firstDefined(opts.intensity1, opts.intensity, 1);\n  var intensity2 = firstDefined(opts.intensity2, opts.intensity, 1);\n  var commonAngle = firstDefined(opts.angle, Math.PI / 4); // 45 degrees by default, so grayscale images work correctly\n  var angle1 = firstDefined(opts.angle1, commonAngle);\n  var angle2 = firstDefined(opts.angle2, -commonAngle * 3);\n  var easing = firstDefined(opts.easing, gsap.easeOut);\n  var speedIn = firstDefined(opts.speedIn, opts.speed, 1.6);\n  var speedOut = firstDefined(opts.speedOut, opts.speed, 1.2);\n  var transitionDelay = firstDefined(opts.transitionDelay, 3000);\n\n  var currentImage = 0;\n  var nextImage = 1;\n  var mat = undefined;\n  var object = undefined;\n  var geometry = undefined;\n  var texture1 = null;\n  var texture2 = null;\n  var disp = null;\n  var loader = null;\n  var slideshowId = null;\n\n  if (!parent) {\n    console.warn('Parent missing');\n    return;\n  }\n\n  if (!((images || (image1 && image2)) && dispImage)) {\n    console.warn('One or more images are missing');\n    return;\n  }\n\n  var scene = new THREE.Scene();\n  var camera = new THREE.OrthographicCamera(\n      parent.offsetWidth / -2,\n      parent.offsetWidth / 2,\n      parent.offsetHeight / 2,\n      parent.offsetHeight / -2,\n      1,\n      1000\n  );\n\n  var renderer = new THREE.WebGLRenderer({\n    antialias: false,\n    alpha: true\n  });\n\n  var imageAspect = imagesRatio;\n\n  var render = function () {\n    // This will be called by the TextureLoader as well as gsap.\n    renderer.render(scene, camera);\n  };\n\n  function setLoader() {\n    loader = new THREE.TextureLoader();\n    loader.crossOrigin = '';\n  }\n\n  function setDisplacement() {\n    disp = loader.load(dispImage, render);\n    disp.magFilter = disp.minFilter = THREE.LinearFilter;\n  }\n\n  function setMaterial() {\n    mat = new THREE.ShaderMaterial({\n      uniforms: {\n        intensity1: {\n          type: 'f',\n          value: intensity1\n        },\n        intensity2: {\n          type: 'f',\n          value: intensity2\n        },\n        dispFactor: {\n          type: 'f',\n          value: 0.0\n        },\n        angle1: {\n          type: 'f',\n          value: angle1\n        },\n        angle2: {\n          type: 'f',\n          value: angle2\n        },\n        texture1: {\n          type: 't',\n          value: texture1\n        },\n        texture2: {\n          type: 't',\n          value: texture2\n        },\n        disp: {\n          type: 't',\n          value: disp\n        },\n        res: {\n          type: 'vec4',\n          value: new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2)\n        },\n        dpr: {\n          type: 'f',\n          value: window.devicePixelRatio\n        }\n      },\n\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      opacity: 1.0,\n    });\n  }\n\n  function setMaterialForNextTransition() {\n    mat.uniforms.texture1.value = texture1;\n    mat.uniforms.texture2.value = texture2;\n    mat.uniforms.dispFactor.value = 0;\n  }\n\n  function setScene() {\n    scene = new THREE.Scene();\n    geometry = new THREE.PlaneBufferGeometry(parent.offsetWidth, parent.offsetHeight, 1);\n    object = new THREE.Mesh(geometry, mat);\n    scene.add(object);\n  }\n\n  function transitionIn() {\n    gsap.to(mat.uniforms.dispFactor,  {\n      duration: speedIn,\n      value: 1,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render,\n    });\n  }\n\n  function transitionOut() {\n    gsap.to(mat.uniforms.dispFactor, {\n      duration: speedOut,\n      value: 0,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render\n    });\n  }\n\n  function playSlideshow() {\n    var index = 0\n    setImage(index)\n    slideshowId = setInterval(() => {\n      transitionIn()\n      index = nextImage\n      setImage(index)\n      loadTexturesImages()\n      setMaterialForNextTransition()\n    }, transitionDelay);\n    return slideshowId;\n  }\n\n  function stopSlideshow() {\n    slideshowId && clearInterval(slideshowId);\n  }\n\n  function setImage(index) {\n    currentImage = index\n    nextImage = (index == (images.length - 1)) ? 0 : (index + 1)\n  }\n\n  function loadTexturesImages() {\n    texture1 = texture2 || loader.load(images[currentImage], render);\n    texture2 = loader.load(images[nextImage], render);\n\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\n  }\n\n  camera.position.z = 1;\n\n  renderer.setPixelRatio(2.0);\n  renderer.setClearColor(0xffffff, 0.0);\n  renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n  parent.appendChild(renderer.domElement);\n\n  let a1, a2;\n  if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n    a1 = 1;\n    a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n  } else {\n    a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n    a2 = 1;\n  }\n\n  setLoader()\n\n  setDisplacement()\n\n  loadTexturesImages();\n\n  setMaterial();\n\n  setScene()\n\n  window.addEventListener('resize', function (e) {\n    if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n      a1 = 1;\n      a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n    } else {\n      a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n      a2 = 1;\n    }\n    object.material.uniforms.res.value = new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2);\n    renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n\n    render()\n  });\n\n  this.next = transitionIn;\n  this.playSlideshow = playSlideshow;\n  this.stopSlideshow = stopSlideshow;\n  this.previous = transitionOut;\n};\n\n"],"names":["opts","firstDefined","i","arguments","length","undefined","console","log","geometry","parent","dispImage","displacementImage","image1","image2","images","imagesRatio","intensity1","intensity","intensity2","commonAngle","angle","Math","PI","angle1","angle2","easing","gsap","easeOut","speedIn","speed","speedOut","transitionDelay","currentImage","nextImage","object","texture1","texture2","disp","loader","slideshowId","warn","scene","THREE","Scene","camera","OrthographicCamera","offsetWidth","offsetHeight","renderer","WebGLRenderer","antialias","alpha","imageAspect","render","transitionIn","to","mat","uniforms","dispFactor","duration","value","ease","onUpdate","onComplete","setImage","index","loadTexturesImages","load","magFilter","LinearFilter","minFilter","a1","a2","position","z","setPixelRatio","setClearColor","setSize","appendChild","domElement","TextureLoader","crossOrigin","ShaderMaterial","type","res","Vector4","dpr","window","devicePixelRatio","vertexShader","fragmentShader","transparent","opacity","PlaneBufferGeometry","Mesh","add","addEventListener","e","material","this","next","playSlideshow","setInterval","stopSlideshow","clearInterval","previous"],"mappings":"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"}